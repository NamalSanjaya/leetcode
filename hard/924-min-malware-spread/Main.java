import java.util.*;

public class MinimizeMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind(n);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        int[] componentSize = new int[n];
        for (int i = 0; i < n; i++) {
            componentSize[uf.find(i)]++;
        }

        int[] malwareCount = new int[n];
        for (int node : initial) {
            malwareCount[uf.find(node)]++;
        }

        int result = Integer.MAX_VALUE;
        int maxSaved = 0;

        Arrays.sort(initial);
        for (int node : initial) {
            int root = uf.find(node);
            if (malwareCount[root] == 1) {
                if (componentSize[root] > maxSaved) {
                    maxSaved = componentSize[root];
                    result = node;
                } else if (componentSize[root] == maxSaved && node < result) {
                    result = node;
                }
            }
        }

        return result == Integer.MAX_VALUE ? initial[0] : result;
    }

    static class UnionFind {
        int[] parent, rank;

        public UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                rank[i] = 0;
            }
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if (rootX != rootY) {
                if (rank[rootX] > rank[rootY]) {
                    parent[rootY] = rootX;
                } else if (rank[rootX] < rank[rootY]) {
                    parent[rootX] = rootY;
                } else {
                    parent[rootY] = rootX;
                    rank[rootX]++;
                }
            }
        }
    }

    // Main function to test the solution
    public static void main(String[] args) {
        MinimizeMalwareSpread solution = new MinimizeMalwareSpread();

        int[][] graph1 = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
        int[] initial1 = {0, 1};
        System.out.println(solution.minMalwareSpread(graph1, initial1)); // Output: 0

        int[][] graph2 = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};
        int[] initial2 = {0, 2};
        System.out.println(solution.minMalwareSpread(graph2, initial2)); // Output: 0

        int[][] graph3 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};
        int[] initial3 = {1, 2};
        System.out.println(solution.minMalwareSpread(graph3, initial3)); // Output: 1
    }
}
